#+EXPORT_EXCLUDE_TAGS: nopub
#+TITLE:Geb
* Another web testing framework?
- Geb uses CSS / Jquery like syntax for selecting HTML elements

- Full Power of Groovy
- Page-Object Pattern
* Installation
- Recommended Groovy Version 1.7.5
- I've tested on Ubuntu Linux, Windows XP, Cygwin
- For this demo, you need Firefox installed
  - Latest Selenium driver has some bugs
  - For this pres, I use org.seleniumhq.selenium:selenium-firefox-driver:2.0a
- To test other browsers (Chrome, Internet Explorer), I /think/ you
  need to have that browser installed on your system.
* Quick Start
Run this from the Groovy Console
:PROPERTIES:
:ID: a46d05d4-6d01-494d-833d-7245ccf530b9
:END:
#+begin_src groovy :tangle simpleTest.groovy :noweb yes
  <<header>>  
        assert title == "Help - About"
        // Un-comment driver.close() to close the browser window
        // driver.close()  
        assert $("a", text:"Loooogin").size() == 0
        assert $("a", text:"Login").size() == 1
  <<footer>>
#+end_src

- Grapes pulls down dependency goodies.  How it works is beyond me.
- Selenium runs under the hood, and creates an instance of the specified browser.
- Test results are some kind of instance of selenium's FirefoxWebElement
http://webdriver.googlecode.com/svn/javadoc/org/openqa/selenium/firefox/FirefoxWebElement.html

* Attribute Selectors
:PROPERTIES:
:ID: 56d305d5-f9a0-4d8b-bdf4-2ef7e139d86a
:END:
Given the following HTML:

#+begin_src html
<h3 class="reallynow">Thanks</h3>
#+end_src

Here's the Geb code we need to match the HTML.  (Both expressions match)
#+srcname: testSimpleAttributes
#+begin_src groovy
    assert $("h3", class: "reallynow", text: "Thanks").size() == 1
    assert $("h3.reallynow", text: "Thanks").size() == 1
#+end_src
** Render                                                            :nopub:
:PROPERTIES:
:ID: bf607f74-3e8c-425d-996d-4bb8a667214a
:END:
#+begin_src groovy :tangle testSimpleAttributes.groovy :noweb tangle
<<header>>
<<testSimpleAttributes>>
<<footer>>
#+end_src

* Testing Relationships
:PROPERTIES:
:ID: 242aa226-c2a5-40eb-9fe0-8b3c78d9f636
:END:
Here we have a <p> element that's right next to an h3 which has the
version of our software.  We can make sure the website shows the
correct version.

#+begin_src html
<h3 class="reallynow">Version</h3>
<p>Version 0.2 "Dangle"</p>
#+end_src

#+srcname: simpleTestRelationships
#+begin_src groovy
assert $("h3.reallynow").siblings("p").find { it.text() =~/Dangle/ }
assert $("h3.reallynow").siblings("p").find { it.text() =~/0\.2/ }
#+end_src
** Render                                                            :nopub:
:PROPERTIES:
:ID: bf607f74-3e8c-425d-996d-4bb8a667214a
:END:
#+begin_src groovy :tangle testSimpleRelationship.groovy :noweb tangle
<<header>>
<<simpleTestRelationships>>
<<footer>>
#+end_src
* Failed Login
:PROPERTIES:
:ID: a9ea7c49-5935-4f45-87df-040696a8390d
:END:
#+srcname: failedLogin
#+begin_src groovy
$("a", text:"Login").click()
$("#loginForm").username = "badguy"
$("#loginForm").password = "badguypassword"
$("#login").click()
assert title == "Login"
assert $("*", text: ~/.*Invalid.*username.*password/).size() > 0
#+end_src
** Render                                                            :nopub:
:PROPERTIES:
:ID: 6459a426-c5e3-4b1d-bab7-15a98f5acd7a
:END:
#+begin_src groovy :tangle testFailedLogin.groovy :noweb tangle
<<header>>
<<failedLogin>>
<<footer>>
#+end_src
* Successful Login
:PROPERTIES:
:ID: 87777828-2f37-46d9-b183-fa837a521e38
:END:
#+srcname: successfulLogin
#+begin_src groovy
    $("a", text:"Login").click()
    $("#loginForm").username = "gug"
    $("#loginForm").password = "groovy18"
    $("#login").click()
    assert $("*", text: ~/.*Welcome to Enrollio, gug!.*/).size() > 0
#+end_src
** Render                                                            :nopub:
:PROPERTIES:
:ID: bdaed8a7-2fd7-452a-8045-123316ed4248
:END:
#+begin_src groovy :tangle testLoginSuccess.groovy :noweb tangle
<<header>>
<<successfulLogin>>
<<footer>>
#+end_src

* One more powerful example

- On our [[file:static/students.html][students]] page, we have a Students table
- Students table contains links to different "Woodstock Jacksons".  One's a parent, the other is a student.
- In the first test, we want to click on the parent
- Second test, click on the student

#+begin_src html
<!-- Link to Woodstock Jackson (parent is in the FIRST td) -->
<tr><td><a href="/parents/2">Woodstock Jackson</a></td>
<!-- Link to Woodstock Jackson (student is in the SECOND td) -->
<tr><td><a href="/parents/2">Schizoid Jackson></td><td><a href="/students/2">Woodstock Jackson</a>
#+end_src
#+srcname:complexExample
#+begin_src groovy
        $("a", text:"Students").click()

        def linkToWoodstockParent = $("tr td:first-child a", text:contains("Woodstock Jackson"))
        assert parentLink.size() != 0
        parentLink.click()
        assert title == "Contact:Woodstock Jackson"
        driver.navigate().back()

        def linkToWoodstockStudent = $("tr td:nth-child(2) a", text:contains("Woodstock Jackson"))
        assert studentLink.size() != 0
        studentLink.click()
        assert title == "Student: Woodstock Jackson"
#+end_src
** Render                                                            :nopub:
:PROPERTIES:
:ID: 125a917b-49b5-4d98-8cf9-88d9fbe4bdab
:END:
#+begin_src groovy :tangle testComplexExample.groovy :noweb tangle
<<header>>
<<successfulLogin>>
<<complexExample>>
<<footer>>
#+end_src
* Moving Along
** We need a test harness
- Improvements to the above setup
- Need to find out how to get more descriptive test results when
  running simple tests.
- Would need to replicate a lot of code when running similar tests

** We have a lot of code that's duplicated within each script
- Login code
- Click here, click there
- What if "Students" link changes or moves?
* Page Object Pattern
http://geb.codehaus.org/manual/latest/intro.html#the_page_object_pattern

** Example
#+srcname: failedLoginPageObjectPattern
#+begin_src groovy
  class LoginPage extends Page {
      static url = "http://enrollio.org/login"
      static at = { title == "Login" }
      static content = {
          usernameField { $("input[name='username']") }
          passwordField { $("input[name='password']") }
          loginButton{ $("#login") }
          errorsMessage { $("div.errors").text() }
      }
  }
   
  Browser.drive(LoginPage) {
          usernameField.value("badguy")
          passwordField.value("badguypassword")
          loginButton.click()
          assert at(LoginPage)
          assert errorsMessage =~ /(?i)invALID uSERNAME.*password/
          assert errorsMessage =~ /Invalid username.*password/
  }
  
#+end_src
*** Render :nopub:
:PROPERTIES:
:ID: 1FFA9F61-6D48-4CD4-804C-584C7BD40707
:END:

#+begin_src groovy :tangle testFailedLoginPageObjectPattern.groovy :noweb tangle 
<<popHeader>>
<<failedLoginPageObjectPattern>>
#+end_src

** Compared To
* Easy to Get Started
- Demo of Peter's SpringOnePresentation
http://github.com/geb/geb-springone2gx-2010-example.git
* See Also
- Geb home page: http://geb.codehaus.org
- Geb Mailing List: http://markmail.org/list/org.codehaus.geb.user
* Source Code                                                   :nopub:
:PROPERTIES:
:ID: df2c04db-2a1f-40d7-9884-f44886a25ede
:END:
#+srcname: header
#+begin_src groovy
@Grapes([
              @Grab("org.codehaus.geb:geb-core:latest.release"),
              @Grab("org.seleniumhq.selenium:selenium-firefox-driver:2.0a5")
])
import geb.Browser
try {
    Browser.drive("http://enrollio.org") {
#+end_src

#+srcname: footer
#+begin_src groovy
    }
}
catch (geb.error.DriveException dex) { 
    dex.printStackTrace() 
    System.exit(1)
}
#+end_src

#+srcname: popHeader
#+begin_src groovy
@Grapes([
              @Grab("org.codehaus.geb:geb-core:latest.release"),
              @Grab("org.seleniumhq.selenium:selenium-firefox-driver:2.0a5")
])
import geb.*
#+end_src
